REST 방식의 서비스
서버쪽에서는 순수한 데이터만 제공하고 클라이언트쪽에서 사용자 화면을 처리하는 서비스 방식
특정한 URI 와  HTTP 메소드 를 결합해서 '특정한 자원'에 특정한 작업을 지정하는 방식
REST 방식을 이해하고 Swagger UI 를 이용해서 테스트하고 문서화하는 방법을 학습하겠습니다.



/board/modify -> 게시물의 수정(행위/목적)     :      /board/123   -> 게시물 자원 자체
<form> --> 데이터 묶음                      :       PUT 방식      -> 행위 나 목적

REST 방식은 하나의 자원을 하나의 주소로 표현해야 한다. 그리고 그 주소는 유일해야 한다.
URL 하나는 하나의 자원을 식별할 수 있는 고유 값이다.

GET  /boards/123     123게시물 조회
POST /boards/        새로운 게시물 등록       신규 게시물 데이터 필요
PUT  /boards/123     123번 게시물 수정       수정 게시물 데이터 필요
DELETE  /boards/123   123번 게시물 삭제

REST 방식의 서비스를 개발할때 API 테스트를 위해 Postman 이나 Swagger UI를 사용한다.
어노테이션 설정으로 API 문서와 테스트 활 수 있는 화면을 생성할 수 있어 편리하여 백엔드 개발자들이 사용한다.

REST 방식의 댓글 처리
1. URL 설계 와 데이터 포맷 결정
2. 컨트롤러의 JSON /XML 처리
3. 동작확인
4. 자바스크립트를 통한 화면 처리


연관관계
- 단방향
  구현이 단순하고 에러 발생의 여지를 줄일 수 있지만 데이터베이스 상에서 조인처리와 같이 다른 엔티티 객체의 내용을 사용하는데 어렵다.
- 양방향
  양쪽 객체 모두 서로 참조를 유지하는 방식
  모든 관리를 양쪽 객체에 동일하게 적용해야만 하는 불편함이 있지만 JPA 에서 필요한 데이터를 탐색하는 작업에서는 편리하다.


  단방향 + JPQL을 통한 조인  , QueryDSL => 실무

  SpringBoot => Paging 기능 위해 ==> Pageable 인터페이스 제공

REST 방식의 서비스 브라우저에서 Ajax 기술을 이용하여 처리해야 한다.
특정한 게시물을 조회하는 화면에서 Ajax 를 통해서
GET/POST/PUT/DELETE 방식으로 ReplyController 호출하고 JSON문자열을 처리하는 방식을 실습

-  비동기 처리   / Axios

   대부분의 프로그래밍의 방식은 동기화된 방식을 이용한다.

     result1 = doA();
     result2 = doB(result1);
     result3 =  doC(result2);     ==> 순처적으로 동기화된 코드 이다.

     동기화된 방식의 단점은  결과를 반환할때 까지 다른 작업은 실행되지 않기 때문에 동시에 여러 작업을 처리할 수 없다.

     '점원이 한명뿐인 테이아웃 커피가게'

     비동기 방식이 필요하다.  '커피가게에 여러 명의 점원이 있는 상황과 유사'
     비동기 방식의 핵심은 '통보' ==>'콜백(callback)'

     function doA(callback){
     result1 =....
        callback(result1)
     }

     Promise 개념을 도입해서 '비동기 호출을 동기화된 방식으로 작성할 수 있도록 지원하는 문법적인 장치'
     Axios 라이브러리 추가
































